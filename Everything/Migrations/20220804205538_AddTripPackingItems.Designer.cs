// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using everything.Data;

namespace everything.Migrations
{
    [DbContext(typeof(EverythingContext))]
    [Migration("20220804205538_AddTripPackingItems")]
    partial class AddTripPackingItems
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("everything.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BudgetId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInvesting")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("everything.Models.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("everything.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpenseBudgetId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseBudgetId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("everything.Models.ExpenseBudget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BudgetId")
                        .HasColumnType("int");

                    b.Property<int?>("DeductionAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActual")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("DeductionAccountId");

                    b.ToTable("ExpenseBudgets");
                });

            modelBuilder.Entity("everything.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("everything.Models.GameQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDouble")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<bool>("NobodyGotRight")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("QuestionId");

                    b.ToTable("GameQuestions");
                });

            modelBuilder.Entity("everything.Models.IncomeSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BudgetId")
                        .HasColumnType("int");

                    b.Property<int?>("DepositAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("DepositAccountId");

                    b.ToTable("IncomeSources");
                });

            modelBuilder.Entity("everything.Models.IncomeSourceDeduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DepositAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IncomeSourceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepositAccountId");

                    b.HasIndex("IncomeSourceId");

                    b.ToTable("IncomeSourceDeductions");
                });

            modelBuilder.Entity("everything.Models.Lift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LiftTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LiftTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Lifts");
                });

            modelBuilder.Entity("everything.Models.LiftDayPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LiftDayPlans");
                });

            modelBuilder.Entity("everything.Models.LiftSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LiftSetLinkId")
                        .HasColumnType("int");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("Reps")
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LiftSetLinkId");

                    b.ToTable("LiftSets");
                });

            modelBuilder.Entity("everything.Models.LiftSetLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LiftId")
                        .HasColumnType("int");

                    b.Property<int?>("LiftingWorkoutId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LiftId");

                    b.HasIndex("LiftingWorkoutId");

                    b.ToTable("LiftSetLinks");
                });

            modelBuilder.Entity("everything.Models.LiftType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LiftType");
                });

            modelBuilder.Entity("everything.Models.LiftingWorkout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LiftingWorkouts");
                });

            modelBuilder.Entity("everything.Models.MuscleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MuscleGroups");
                });

            modelBuilder.Entity("everything.Models.MuscleGroupForLift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LiftId")
                        .HasColumnType("int");

                    b.Property<int>("MuscleGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LiftId");

                    b.HasIndex("MuscleGroupId");

                    b.ToTable("MuscleGroupForLifts");
                });

            modelBuilder.Entity("everything.Models.MuscleGroupForLiftDayPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LiftDayPlanId")
                        .HasColumnType("int");

                    b.Property<int>("MuscleGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LiftDayPlanId");

                    b.HasIndex("MuscleGroupId");

                    b.ToTable("MuscleGroupForLiftDayPlans");
                });

            modelBuilder.Entity("everything.Models.PackingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PackingItems");
                });

            modelBuilder.Entity("everything.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("ColorHexCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("everything.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Statement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionCategoryId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("everything.Models.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Bet")
                        .HasColumnType("int");

                    b.Property<int>("GameQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<bool>("WasRight")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GameQuestionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("everything.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("everything.Models.TagForPackingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PackingItemId")
                        .HasColumnType("int");

                    b.Property<int>("TravelTagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackingItemId");

                    b.HasIndex("TravelTagId");

                    b.ToTable("TagForPackingItems");
                });

            modelBuilder.Entity("everything.Models.TagForTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TravelTagId")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TravelTagId");

                    b.HasIndex("TripId");

                    b.ToTable("TagForTrips");
                });

            modelBuilder.Entity("everything.Models.ToDoBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BoardFolderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardFolderId");

                    b.HasIndex("UserId");

                    b.ToTable("ToDoBoards");
                });

            modelBuilder.Entity("everything.Models.ToDoBoardFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BoardFolderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardFolderId");

                    b.HasIndex("UserId");

                    b.ToTable("ToDoBoardFolders");
                });

            modelBuilder.Entity("everything.Models.ToDoColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("ToDoBoardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ToDoBoardId");

                    b.ToTable("ToDoColumns");
                });

            modelBuilder.Entity("everything.Models.ToDoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("ToDoColumnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ToDoColumnId");

                    b.ToTable("ToDoItems");
                });

            modelBuilder.Entity("everything.Models.ToDoItemTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("ToDoItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ToDoItemId");

                    b.ToTable("ToDoItemTasks");
                });

            modelBuilder.Entity("everything.Models.TravelTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorHexCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TravelTags");
                });

            modelBuilder.Entity("everything.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("everything.Models.TripFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserId");

                    b.ToTable("TripFolders");
                });

            modelBuilder.Entity("everything.Models.TripPackingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsPacked")
                        .HasColumnType("bit");

                    b.Property<int>("PackingItemId")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackingItemId");

                    b.HasIndex("TripId");

                    b.ToTable("TripPackingItems");
                });

            modelBuilder.Entity("everything.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("everything.Models.Account", b =>
                {
                    b.HasOne("everything.Models.Budget", "Budget")
                        .WithMany("Accounts")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("everything.Models.Budget", b =>
                {
                    b.HasOne("everything.Models.User", "User")
                        .WithMany("Budgets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("everything.Models.Expense", b =>
                {
                    b.HasOne("everything.Models.ExpenseBudget", "ExpenseBudget")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseBudgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExpenseBudget");
                });

            modelBuilder.Entity("everything.Models.ExpenseBudget", b =>
                {
                    b.HasOne("everything.Models.Budget", "Budget")
                        .WithMany("ExpenseBudgets")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("everything.Models.Account", "DeductionAccount")
                        .WithMany("ExpenseBudgetDeductions")
                        .HasForeignKey("DeductionAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Budget");

                    b.Navigation("DeductionAccount");
                });

            modelBuilder.Entity("everything.Models.Game", b =>
                {
                    b.HasOne("everything.Models.User", "User")
                        .WithMany("Games")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("everything.Models.GameQuestion", b =>
                {
                    b.HasOne("everything.Models.Game", "Game")
                        .WithMany("GameQuestions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("everything.Models.Question", "Question")
                        .WithMany("GameQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("everything.Models.IncomeSource", b =>
                {
                    b.HasOne("everything.Models.Budget", "Budget")
                        .WithMany("IncomeSources")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("everything.Models.Account", "DepositAccount")
                        .WithMany("IncomeDeposits")
                        .HasForeignKey("DepositAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Budget");

                    b.Navigation("DepositAccount");
                });

            modelBuilder.Entity("everything.Models.IncomeSourceDeduction", b =>
                {
                    b.HasOne("everything.Models.Account", "DepositAccount")
                        .WithMany("IncomeDeductionDeposits")
                        .HasForeignKey("DepositAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("everything.Models.IncomeSource", "IncomeSource")
                        .WithMany("Deductions")
                        .HasForeignKey("IncomeSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DepositAccount");

                    b.Navigation("IncomeSource");
                });

            modelBuilder.Entity("everything.Models.Lift", b =>
                {
                    b.HasOne("everything.Models.LiftType", "LiftType")
                        .WithMany("Lifts")
                        .HasForeignKey("LiftTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("everything.Models.User", "User")
                        .WithMany("Lifts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LiftType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("everything.Models.LiftDayPlan", b =>
                {
                    b.HasOne("everything.Models.User", "User")
                        .WithMany("LiftDayPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("everything.Models.LiftSet", b =>
                {
                    b.HasOne("everything.Models.LiftSetLink", "LiftSetLink")
                        .WithMany("LiftSets")
                        .HasForeignKey("LiftSetLinkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LiftSetLink");
                });

            modelBuilder.Entity("everything.Models.LiftSetLink", b =>
                {
                    b.HasOne("everything.Models.Lift", "Lift")
                        .WithMany("LiftSetLinks")
                        .HasForeignKey("LiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("everything.Models.LiftingWorkout", "LiftingWorkout")
                        .WithMany("LiftSetLinks")
                        .HasForeignKey("LiftingWorkoutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Lift");

                    b.Navigation("LiftingWorkout");
                });

            modelBuilder.Entity("everything.Models.LiftType", b =>
                {
                    b.HasOne("everything.Models.User", "User")
                        .WithMany("LiftTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("everything.Models.LiftingWorkout", b =>
                {
                    b.HasOne("everything.Models.User", "User")
                        .WithMany("LiftingWorkouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("everything.Models.MuscleGroup", b =>
                {
                    b.HasOne("everything.Models.User", "User")
                        .WithMany("MuscleGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("everything.Models.MuscleGroupForLift", b =>
                {
                    b.HasOne("everything.Models.Lift", "Lift")
                        .WithMany("MuscleGroupLinks")
                        .HasForeignKey("LiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("everything.Models.MuscleGroup", "MuscleGroup")
                        .WithMany("MuscleGroupForLiftsLinks")
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lift");

                    b.Navigation("MuscleGroup");
                });

            modelBuilder.Entity("everything.Models.MuscleGroupForLiftDayPlan", b =>
                {
                    b.HasOne("everything.Models.LiftDayPlan", "LiftDayPlan")
                        .WithMany("MuscleGroupForLiftsLinks")
                        .HasForeignKey("LiftDayPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("everything.Models.MuscleGroup", "MuscleGroup")
                        .WithMany("MuscleGroupForPlanLinks")
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LiftDayPlan");

                    b.Navigation("MuscleGroup");
                });

            modelBuilder.Entity("everything.Models.PackingItem", b =>
                {
                    b.HasOne("everything.Models.User", "User")
                        .WithMany("PackingItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("everything.Models.Player", b =>
                {
                    b.HasOne("everything.Models.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("everything.Models.Question", b =>
                {
                    b.HasOne("everything.Models.QuestionCategory", "QuestionCategory")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionCategory");
                });

            modelBuilder.Entity("everything.Models.QuestionAnswer", b =>
                {
                    b.HasOne("everything.Models.GameQuestion", "GameQuestion")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("GameQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("everything.Models.Player", "Player")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameQuestion");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("everything.Models.QuestionCategory", b =>
                {
                    b.HasOne("everything.Models.User", "User")
                        .WithMany("QuestionCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("everything.Models.TagForPackingItem", b =>
                {
                    b.HasOne("everything.Models.PackingItem", "PackingItem")
                        .WithMany("TagLinks")
                        .HasForeignKey("PackingItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("everything.Models.TravelTag", "TravelTag")
                        .WithMany("PackingItemLinks")
                        .HasForeignKey("TravelTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PackingItem");

                    b.Navigation("TravelTag");
                });

            modelBuilder.Entity("everything.Models.TagForTrip", b =>
                {
                    b.HasOne("everything.Models.TravelTag", "TravelTag")
                        .WithMany("TripLinks")
                        .HasForeignKey("TravelTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("everything.Models.Trip", "Trip")
                        .WithMany("TagLinks")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TravelTag");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("everything.Models.ToDoBoard", b =>
                {
                    b.HasOne("everything.Models.ToDoBoardFolder", "BoardFolder")
                        .WithMany("ToDoBoards")
                        .HasForeignKey("BoardFolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("everything.Models.User", "User")
                        .WithMany("ToDoBoards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BoardFolder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("everything.Models.ToDoBoardFolder", b =>
                {
                    b.HasOne("everything.Models.ToDoBoardFolder", "BoardFolder")
                        .WithMany("BoardFolders")
                        .HasForeignKey("BoardFolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("everything.Models.User", "User")
                        .WithMany("ToDoBoardFolders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BoardFolder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("everything.Models.ToDoColumn", b =>
                {
                    b.HasOne("everything.Models.ToDoBoard", "ToDoBoard")
                        .WithMany("ToDoColumns")
                        .HasForeignKey("ToDoBoardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ToDoBoard");
                });

            modelBuilder.Entity("everything.Models.ToDoItem", b =>
                {
                    b.HasOne("everything.Models.ToDoColumn", "ToDoColumn")
                        .WithMany("ToDoItems")
                        .HasForeignKey("ToDoColumnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ToDoColumn");
                });

            modelBuilder.Entity("everything.Models.ToDoItemTask", b =>
                {
                    b.HasOne("everything.Models.ToDoItem", "ToDoItem")
                        .WithMany("Tasks")
                        .HasForeignKey("ToDoItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ToDoItem");
                });

            modelBuilder.Entity("everything.Models.TravelTag", b =>
                {
                    b.HasOne("everything.Models.User", "User")
                        .WithMany("TravelTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("everything.Models.Trip", b =>
                {
                    b.HasOne("everything.Models.TripFolder", "Folder")
                        .WithMany("Trips")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("everything.Models.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("everything.Models.TripFolder", b =>
                {
                    b.HasOne("everything.Models.TripFolder", "Folder")
                        .WithMany("Folders")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("everything.Models.User", "User")
                        .WithMany("TripFolders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("everything.Models.TripPackingItem", b =>
                {
                    b.HasOne("everything.Models.PackingItem", "PackingItem")
                        .WithMany("TripPackingItems")
                        .HasForeignKey("PackingItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("everything.Models.Trip", "Trip")
                        .WithMany("TripPackingItems")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PackingItem");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("everything.Models.Account", b =>
                {
                    b.Navigation("ExpenseBudgetDeductions");

                    b.Navigation("IncomeDeductionDeposits");

                    b.Navigation("IncomeDeposits");
                });

            modelBuilder.Entity("everything.Models.Budget", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("ExpenseBudgets");

                    b.Navigation("IncomeSources");
                });

            modelBuilder.Entity("everything.Models.ExpenseBudget", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("everything.Models.Game", b =>
                {
                    b.Navigation("GameQuestions");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("everything.Models.GameQuestion", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("everything.Models.IncomeSource", b =>
                {
                    b.Navigation("Deductions");
                });

            modelBuilder.Entity("everything.Models.Lift", b =>
                {
                    b.Navigation("LiftSetLinks");

                    b.Navigation("MuscleGroupLinks");
                });

            modelBuilder.Entity("everything.Models.LiftDayPlan", b =>
                {
                    b.Navigation("MuscleGroupForLiftsLinks");
                });

            modelBuilder.Entity("everything.Models.LiftSetLink", b =>
                {
                    b.Navigation("LiftSets");
                });

            modelBuilder.Entity("everything.Models.LiftType", b =>
                {
                    b.Navigation("Lifts");
                });

            modelBuilder.Entity("everything.Models.LiftingWorkout", b =>
                {
                    b.Navigation("LiftSetLinks");
                });

            modelBuilder.Entity("everything.Models.MuscleGroup", b =>
                {
                    b.Navigation("MuscleGroupForLiftsLinks");

                    b.Navigation("MuscleGroupForPlanLinks");
                });

            modelBuilder.Entity("everything.Models.PackingItem", b =>
                {
                    b.Navigation("TagLinks");

                    b.Navigation("TripPackingItems");
                });

            modelBuilder.Entity("everything.Models.Player", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("everything.Models.Question", b =>
                {
                    b.Navigation("GameQuestions");
                });

            modelBuilder.Entity("everything.Models.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("everything.Models.ToDoBoard", b =>
                {
                    b.Navigation("ToDoColumns");
                });

            modelBuilder.Entity("everything.Models.ToDoBoardFolder", b =>
                {
                    b.Navigation("BoardFolders");

                    b.Navigation("ToDoBoards");
                });

            modelBuilder.Entity("everything.Models.ToDoColumn", b =>
                {
                    b.Navigation("ToDoItems");
                });

            modelBuilder.Entity("everything.Models.ToDoItem", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("everything.Models.TravelTag", b =>
                {
                    b.Navigation("PackingItemLinks");

                    b.Navigation("TripLinks");
                });

            modelBuilder.Entity("everything.Models.Trip", b =>
                {
                    b.Navigation("TagLinks");

                    b.Navigation("TripPackingItems");
                });

            modelBuilder.Entity("everything.Models.TripFolder", b =>
                {
                    b.Navigation("Folders");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("everything.Models.User", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("Games");

                    b.Navigation("LiftDayPlans");

                    b.Navigation("LiftingWorkouts");

                    b.Navigation("Lifts");

                    b.Navigation("LiftTypes");

                    b.Navigation("MuscleGroups");

                    b.Navigation("PackingItems");

                    b.Navigation("QuestionCategories");

                    b.Navigation("ToDoBoardFolders");

                    b.Navigation("ToDoBoards");

                    b.Navigation("TravelTags");

                    b.Navigation("TripFolders");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
